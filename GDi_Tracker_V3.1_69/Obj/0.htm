<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Nov 17 11:13:15 2016
<BR><P>
<H3>Maximum Stack Usage =        672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Gparser_work &rArr; NmeaParser &rArr; ParseNMEASentence &rArr; ProcessGNRMC &rArr; WriteMagneticVariation &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[31c]">__user_initial_stackheap</a>
 <LI><a href="#[236]">QK_init</a>
 <LI><a href="#[51]">PendSV_Handler</a>
 <LI><a href="#[4f]">SVC_Handler</a>
 <LI><a href="#[92]">svc_ret</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">NMI_Handler</a><BR>
 <LI><a href="#[50]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">DebugMon_Handler</a><BR>
 <LI><a href="#[65]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[65]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[82]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">BusFault_Handler</a> from main.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">Config</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[117]">CtrlInitial1</a> from control_new.o(.text) referenced from control_new.o(.text)
 <LI><a href="#[111]">CtrlMemoryErrSuper11</a> from control_new.o(.text) referenced 3 times from control_new.o(.text)
 <LI><a href="#[113]">CtrlPackFinal6</a> from control_new.o(.text) referenced 2 times from control_new.o(.text)
 <LI><a href="#[112]">CtrlPackIdle7</a> from control_new.o(.text) referenced 3 times from control_new.o(.text)
 <LI><a href="#[116]">CtrlPackModemBusy8</a> from control_new.o(.text) referenced 2 times from control_new.o(.text)
 <LI><a href="#[115]">CtrlPackSendFresh10</a> from control_new.o(.text) referenced 2 times from control_new.o(.text)
 <LI><a href="#[114]">CtrlPackSendPage9</a> from control_new.o(.text) referenced 2 times from control_new.o(.text)
 <LI><a href="#[110]">CtrlPackSuper3</a> from control_new.o(.text) referenced 3 times from control_new.o(.text)
 <LI><a href="#[10f]">CtrlSysRebootSuper22</a> from control_new.o(.text) referenced 3 times from control_new.o(.text)
 <LI><a href="#[10b]">CtrlUpdConf15</a> from control_new.o(.text) referenced 2 times from control_new.o(.text)
 <LI><a href="#[10a]">CtrlUpdFinal19</a> from control_new.o(.text) referenced 4 times from control_new.o(.text)
 <LI><a href="#[10d]">CtrlUpdFwContinue18</a> from control_new.o(.text) referenced 3 times from control_new.o(.text)
 <LI><a href="#[10c]">CtrlUpdFwStart17</a> from control_new.o(.text) referenced 3 times from control_new.o(.text)
 <LI><a href="#[108]">CtrlUpdReOpenConnection14</a> from control_new.o(.text) referenced 4 times from control_new.o(.text)
 <LI><a href="#[10e]">CtrlUpdStart13</a> from control_new.o(.text) referenced 2 times from control_new.o(.text)
 <LI><a href="#[107]">CtrlUpdSuper12</a> from control_new.o(.text) referenced 6 times from control_new.o(.text)
 <LI><a href="#[109]">CtrlUpdSupervisor16</a> from control_new.o(.text) referenced 4 times from control_new.o(.text)
 <LI><a href="#[118]">CtrlWaitDiskReady2</a> from control_new.o(.text) referenced from control_new.o(.text)
 <LI><a href="#[5e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">DMA1_Channel4_IRQHandler</a> from modem_sim900.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8c]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8d]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8e]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DutDeltaN</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[59]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">EXTI9_5_IRQHandler</a> from io.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">EpsilonReadData_rx_handler</a> from epsilon.o(.text) referenced 2 times from epsilon.o(.data)
 <LI><a href="#[3d]">EpsilonReadData_tx_handler</a> from epsilon.o(.text) referenced 2 times from epsilon.o(.data)
 <LI><a href="#[40]">EpsilonWriteAddr_rx_handler</a> from epsilon.o(.text) referenced 2 times from epsilon.o(.data)
 <LI><a href="#[3f]">EpsilonWriteAddr_tx_handler</a> from epsilon.o(.text) referenced 2 times from epsilon.o(.data)
 <LI><a href="#[57]">FLASH_IRQHandler</a> from control_new.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[83]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f4]">FdiskCheck</a> from disk.o(.text) referenced from disk.o(.text)
 <LI><a href="#[f8]">FdiskDelPage10</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[f7]">FdiskDelToSend11</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[f2]">FdiskFlashErr14</a> from disk.o(.text) referenced 5 times from disk.o(.text)
 <LI><a href="#[fe]">FdiskFormatFlash</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[f3]">FdiskFramErr13</a> from disk.o(.text) referenced 5 times from disk.o(.text)
 <LI><a href="#[f1]">FdiskIdle3</a> from disk.o(.text) referenced 5 times from disk.o(.text)
 <LI><a href="#[ff]">FdiskInit2</a> from disk.o(.text) referenced from disk.o(.text)
 <LI><a href="#[100]">FdiskInitial0</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[f9]">FdiskMakeArchPack8</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[fa]">FdiskMakeFreshPack9</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[f5]">FdiskOff16</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[fb]">FdiskReadConfig5</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[fc]">FdiskSaveConfig15</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[f0]">FdiskTop1</a> from disk.o(.text) referenced 6 times from disk.o(.text)
 <LI><a href="#[f6]">FdiskUnlToSend12</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[fd]">FdiskWrite7</a> from disk.o(.text) referenced 2 times from disk.o(.text)
 <LI><a href="#[9]">GetBalance</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[8]">GetGprs</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[c]">GetImei</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[b]">GetModem</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[5]">GetNav</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[6]">GetPack</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[4]">GetRS485</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[a]">GetStatus</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[7]">GetVer</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[122]">Gfilter_initial</a> from nav_filter.o(.text) referenced from nav_filter.o(.text)
 <LI><a href="#[11f]">Gfilter_long_stop</a> from nav_filter.o(.text) referenced 2 times from nav_filter.o(.text)
 <LI><a href="#[11e]">Gfilter_move</a> from nav_filter.o(.text) referenced 2 times from nav_filter.o(.text)
 <LI><a href="#[11d]">Gfilter_off</a> from nav_filter.o(.text) referenced 4 times from nav_filter.o(.text)
 <LI><a href="#[120]">Gfilter_short_stop</a> from nav_filter.o(.text) referenced 2 times from nav_filter.o(.text)
 <LI><a href="#[11c]">Gfilter_waiting_fix</a> from nav_filter.o(.text) referenced 4 times from nav_filter.o(.text)
 <LI><a href="#[121]">Gfilter_waiting_hdop</a> from nav_filter.o(.text) referenced from nav_filter.o(.text)
 <LI><a href="#[11b]">Gparser_initial</a> from nmea_parser.o(.text) referenced from nmea_parser.o(.text)
 <LI><a href="#[119]">Gparser_power_on_start</a> from nmea_parser.o(.text) referenced from nmea_parser.o(.text)
 <LI><a href="#[11a]">Gparser_work</a> from nmea_parser.o(.text) referenced from nmea_parser.o(.text)
 <LI><a href="#[4b]">HardFault_Handler</a> from main.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[104]">IO_RS485_polling</a> from io.o(.text) referenced from io.o(.text)
 <LI><a href="#[101]">IO_idle</a> from io.o(.text) referenced 2 times from io.o(.text)
 <LI><a href="#[103]">IO_initial</a> from io.o(.text) referenced from io.o(.text)
 <LI><a href="#[105]">IO_process_RS485_command</a> from io.o(.text) referenced from io.o(.text)
 <LI><a href="#[102]">IO_top</a> from io.o(.text) referenced 2 times from io.o(.text)
 <LI><a href="#[4c]">MemManage_Handler</a> from main.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e3]">ModemSM_add_iphead_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e3]">ModemSM_add_iphead_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[ef]">ModemSM_aon_on</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[ef]">ModemSM_aon_on</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e7]">ModemSM_bring_up_gprs_con</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e7]">ModemSM_bring_up_gprs_con</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d4]">ModemSM_check_baudrate</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d4]">ModemSM_check_baudrate</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[ed]">ModemSM_check_sim</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[ed]">ModemSM_check_sim</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d6]">ModemSM_echo_off</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d6]">ModemSM_echo_off</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d5]">ModemSM_fix_baudrate</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d5]">ModemSM_fix_baudrate</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d8]">ModemSM_get_imei</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d8]">ModemSM_get_imei</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[da]">ModemSM_get_imsi</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[da]">ModemSM_get_imsi</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e8]">ModemSM_get_local_ip_address</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e8]">ModemSM_get_local_ip_address</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[ec]">ModemSM_get_tcp_data</a> from modem_sim900.o(.text) referenced 2 times from modem_sim900.o(.constdata)
 <LI><a href="#[ec]">ModemSM_get_tcp_data</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e2]">ModemSM_gprs_attach</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e2]">ModemSM_gprs_attach</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e0]">ModemSM_gsm_reg</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e0]">ModemSM_gsm_reg</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[ce]">ModemSM_idle</a> from modem_sim900.o(.text) referenced 4 times from modem_sim900.o(.text)
 <LI><a href="#[cf]">ModemSM_initial</a> from modem_sim900.o(.text) referenced 2 times from modem_sim900.o(.text)
 <LI><a href="#[e1]">ModemSM_open_gprs_check_ipstat</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e1]">ModemSM_open_gprs_check_ipstat</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e9]">ModemSM_packet_request_to_send</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e9]">ModemSM_packet_request_to_send</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[ea]">ModemSM_packet_send</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[ea]">ModemSM_packet_send</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[df]">ModemSM_pause</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[df]">ModemSM_pause</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[de]">ModemSM_power_off</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[de]">ModemSM_power_off</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d0]">ModemSM_power_on</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d0]">ModemSM_power_on</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d1]">ModemSM_power_on_with_power_key</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d1]">ModemSM_power_on_with_power_key</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d3]">ModemSM_send_at</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d3]">ModemSM_send_at</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e5]">ModemSM_set_apn</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e5]">ModemSM_set_apn</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e4]">ModemSM_set_manual_getdata_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e4]">ModemSM_set_manual_getdata_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[12a]">ModemSM_set_message_storage</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[ee]">ModemSM_set_te_character</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[ee]">ModemSM_set_te_character</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d7]">ModemSM_sim_det_off</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d7]">ModemSM_sim_det_off</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[dc]">ModemSM_sms_set_ind_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[dc]">ModemSM_sms_set_ind_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[dd]">ModemSM_sms_set_show_mode_1</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[db]">ModemSM_sms_set_text_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[db]">ModemSM_sms_set_text_mode</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[e6]">ModemSM_start_task</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[e6]">ModemSM_start_task</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[d9]">ModemSM_waiting_call_ready</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d9]">ModemSM_waiting_call_ready</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[12b]">ModemSM_waiting_gprs_ready</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[129]">ModemSM_waiting_sms_ready</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d2]">ModemSM_waiting_status_ok</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[d2]">ModemSM_waiting_status_ok</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[eb]">ModemSM_waiting_tcp_data</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.constdata)
 <LI><a href="#[eb]">ModemSM_waiting_tcp_data</a> from modem_sim900.o(.text) referenced from modem_sim900.o(.text)
 <LI><a href="#[9e]">ModemSmsDeleteAll50</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[9b]">ModemSmsProcSmsFlags37</a> from modem.o(.text) referenced 5 times from modem.o(.text)
 <LI><a href="#[a2]">ModemSmsRequestToSendAnswer_35</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[c8]">ModemSmsRequestToSendServ48</a> from modem.o(.text) referenced from modem.o(.text)
 <LI><a href="#[a1]">ModemSmsSendAnsw36</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[c6]">ModemSmsSendServ49</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b7]">Modem_authorization_18</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b1]">Modem_authorization_error_19</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[b0]">Modem_authorization_fatal_error_64</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[c0]">Modem_check_if_connected_14</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[ae]">Modem_close_connection_16</a> from modem.o(.text) referenced 5 times from modem.o(.text)
 <LI><a href="#[af]">Modem_close_gprs_10</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[b4]">Modem_gprs_is_open_state_11</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[c1]">Modem_gsm_is_open_7</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[a7]">Modem_gsm_open_6</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[a5]">Modem_gsm_open_error_8</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[a6]">Modem_gsm_open_fatal_error_61</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[a9]">Modem_hard_reset_5</a> from modem.o(.text) referenced 4 times from modem.o(.text)
 <LI><a href="#[c7]">Modem_initial</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[c5]">Modem_off_45</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b8]">Modem_open_connection_15</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[ad]">Modem_open_connection_error_17</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[ac]">Modem_open_connection_fatal_error_63</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[ab]">Modem_open_gprs_9</a> from modem.o(.text) referenced 5 times from modem.o(.text)
 <LI><a href="#[aa]">Modem_open_gprs_error_12</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[a8]">Modem_open_gprs_fatal_error_62</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[93]">Modem_power_on_start_up_2</a> from modem.o(.text) referenced 5 times from modem.o(.text)
 <LI><a href="#[c2]">Modem_power_on_start_up_error_3</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[97]">Modem_power_on_start_up_fatal_error_60</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[a4]">Modem_restart_4</a> from modem.o(.text) referenced 4 times from modem.o(.text)
 <LI><a href="#[b5]">Modem_send_packet_22</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b3]">Modem_send_packet_error_23</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b2]">Modem_send_packet_fatal_error_65</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[96]">Modem_sim_error_20</a> from modem.o(.text) referenced 8 times from modem.o(.text)
 <LI><a href="#[95]">Modem_sim_fatal_error_66</a> from modem.o(.text) referenced from modem.o(.text)
 <LI><a href="#[c3]">Modem_sim_lock_error_21</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[98]">Modem_sim_lock_fatal_error_67</a> from modem.o(.text) referenced from modem.o(.text)
 <LI><a href="#[a3]">Modem_sms_check_balance_38</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[9c]">Modem_sms_delete_34</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[9d]">Modem_sms_final_39</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[99]">Modem_sms_read_next_31</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[9a]">Modem_sms_super_30</a> from modem.o(.text) referenced 10 times from modem.o(.text)
 <LI><a href="#[9f]">Modem_sms_waiting_read_ok_32</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[a0]">Modem_sms_waiting_unread_ok_33</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b6]">Modem_tcp_is_open_state_13</a> from modem.o(.text) referenced 3 times from modem.o(.text)
 <LI><a href="#[94]">Modem_top_1</a> from modem.o(.text) referenced 11 times from modem.o(.text)
 <LI><a href="#[be]">Modem_upd_auth_42</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[bd]">Modem_upd_connect_error_47</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[bb]">Modem_upd_get_remain_fw_data_46</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[bf]">Modem_upd_open_conn_41</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[ba]">Modem_upd_ready_44</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[bc]">Modem_upd_send_packet_43</a> from modem.o(.text) referenced 2 times from modem.o(.text)
 <LI><a href="#[b9]">Modem_upd_super_40</a> from modem.o(.text) referenced 4 times from modem.o(.text)
 <LI><a href="#[cc]">Mparser_copy_packet_to_buf</a> from modem_parser.o(.text) referenced 2 times from modem_parser.o(.text)
 <LI><a href="#[cb]">Mparser_copy_unread_sms_to_buf</a> from modem_parser.o(.text) referenced 2 times from modem_parser.o(.text)
 <LI><a href="#[cd]">Mparser_initial</a> from modem_parser.o(.text) referenced from modem_parser.o(.text)
 <LI><a href="#[c9]">Mparser_search_LF</a> from modem_parser.o(.text) referenced 2 times from modem_parser.o(.text)
 <LI><a href="#[ca]">Mparser_search_start_of_message</a> from modem_parser.o(.text) referenced 2 times from modem_parser.o(.text)
 <LI><a href="#[4a]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">PendSV_Handler</a> from qk_port.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12f]">QActive_post</a> from qa_fifo.o(.text) referenced from qa_ctor.o(.constdata)
 <LI><a href="#[130]">QActive_postLIFO</a> from qa_lifo.o(.text) referenced from qa_ctor.o(.constdata)
 <LI><a href="#[12e]">QActive_start</a> from qk.o(.text) referenced from qa_ctor.o(.constdata)
 <LI><a href="#[132]">QFsm_dispatch</a> from qfsm_dis.o(.text) referenced from qfsm_ini.o(.constdata)
 <LI><a href="#[131]">QFsm_init</a> from qfsm_ini.o(.text) referenced from qfsm_ini.o(.constdata)
 <LI><a href="#[12d]">QHsm_dispatch</a> from qhsm_dis.o(.text) referenced 2 times from qa_ctor.o(.constdata)
 <LI><a href="#[12c]">QHsm_init</a> from qhsm_ini.o(.text) referenced 2 times from qa_ctor.o(.constdata)
 <LI><a href="#[c4]">QHsm_top</a> from qhsm_top.o(.text) referenced 13 times from modem.o(.text)
 <LI><a href="#[91]">QK_sched_</a> from qk_sched.o(.text) referenced from qk_port.o(.text)
 <LI><a href="#[58]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">RF10ReadCardId_rx_handler</a> from rf10.o(.text) referenced 2 times from rf10.o(.data)
 <LI><a href="#[41]">RF10ReadCardId_tx_handler</a> from rf10.o(.text) referenced 2 times from rf10.o(.data)
 <LI><a href="#[44]">RF10Rele_rx_handler</a> from rf10.o(.text) referenced 2 times from rf10.o(.data)
 <LI><a href="#[43]">RF10Rele_tx_handler</a> from rf10.o(.text) referenced 2 times from rf10.o(.data)
 <LI><a href="#[46]">RF10WriteAddr_rx_handler</a> from rf10.o(.text) referenced 2 times from rf10.o(.data)
 <LI><a href="#[45]">RF10WriteAddr_tx_handler</a> from rf10.o(.text) referenced 2 times from rf10.o(.data)
 <LI><a href="#[106]">RS485_tx</a> from io.o(.text) referenced from io.o(.text)
 <LI><a href="#[7c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">Reboot</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[49]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">Rrt</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[84]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[86]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">SVC_Handler</a> from qk_port.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">Set1FinMode</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[31]">Set1RS485Addr</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[2b]">Set1RS485Dev</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[37]">Set1RS485Out</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[29]">Set2FinMode</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[32]">Set2RS485Addr</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[2c]">Set2RS485Dev</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[38]">Set2RS485Out</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[33]">Set3RS485Addr</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[2d]">Set3RS485Dev</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[39]">Set3RS485Out</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[34]">Set4RS485Addr</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[2e]">Set4RS485Dev</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[3a]">Set4RS485Out</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[35]">Set5RS485Addr</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[2f]">Set5RS485Dev</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[3b]">Set5RS485Out</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[36]">Set6RS485Addr</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[30]">Set6RS485Dev</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[3c]">Set6RS485Out</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[20]">SetFwVerNew</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[d]">SetGprsApn1</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[11]">SetGprsApn2</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[f]">SetGprsPsw1</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[13]">SetGprsPsw2</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[e]">SetGprsUname1</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[12]">SetGprsUname2</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[15]">SetMainIp</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[16]">SetMainPort</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[1c]">SetNavFilter</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[1f]">SetPacketPrioFilter</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[1e]">SetPacketSendDist</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[1d]">SetPacketSendTime</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[1b]">SetPointStoreAngle</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[1a]">SetPointStoreDist</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[19]">SetPointStoreTime</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[24]">SetProtocol</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[17]">SetServiceIp</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[18]">SetServicePort</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[25]">SetSim</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[10]">SetUssdBalance1</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[14]">SetUssdBalance2</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[26]">Start</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[27]">Stop</a> from config.o(.text) referenced 2 times from config.o(.data)
 <LI><a href="#[52]">SysTick_Handler</a> from bsp.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8f]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[55]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">TIM1_UP_IRQHandler</a> from io.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[89]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">TIM7_IRQHandler</a> from io.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TL10ReadId_rx_handler</a> from tl10.o(.text) referenced 2 times from tl10.o(.data)
 <LI><a href="#[47]">TL10ReadId_tx_handler</a> from tl10.o(.text) referenced 2 times from tl10.o(.data)
 <LI><a href="#[87]">UART4_IRQHandler</a> from nmea_parser.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[88]">UART5_IRQHandler</a> from io.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">USART1_IRQHandler</a> from modem_sim900.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7a]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">UsageFault_Handler</a> from main.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[133]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[123]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[125]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[127]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[126]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[124]">_sputc</a> from _sputc.o(.text) referenced 2 times from __2sprintf.o(.text)
 <LI><a href="#[128]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[92]">svc_ret</a> from qk_port.o(.text) referenced from qk_port.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[133]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[134]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[136]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[366]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[367]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[368]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[369]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[36a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[137]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[300]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[139]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[13b]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[13d]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[13e]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[13f]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[36b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[141]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[143]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[144]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[145]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[147]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[149]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[14d]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[14f]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[36c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[151]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[153]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[155]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[157]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[36d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[163]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[36e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[36f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[370]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[371]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[372]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[373]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[374]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[375]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[376]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[377]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[378]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[379]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[37a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[37b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[37c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[37d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[37e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[37f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[380]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[381]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[382]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[383]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[384]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[385]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[386]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[387]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[388]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[135]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[389]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[160]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[162]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[38a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[164]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Bsp_init &rArr; QS_onStartup &rArr; QS_initBuf &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[327]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[167]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[38c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[169]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8f]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38d]"></a>catch_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>HardFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>MemManage_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>BusFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UsageFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16b]"></a>CauseOfReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>main</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = main &rArr; Bsp_init &rArr; QS_onStartup &rArr; QS_initBuf &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_psInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavFilter_ctor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_ctor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ctor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_ctor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_ctor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdisk_ctor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_ctor
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CauseOfReset
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17b]"></a>Q_onAssert</STRONG> (Thumb, 24 bytes, Stack size 104 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_initBuf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_filterOn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_filterOff
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getQueueMin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_recall
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getPoolMin
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_noTimeEvtsActiveX
</UL>

<P><STRONG><a name="[17d]"></a>QS_onStartup</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = QS_onStartup &rArr; QS_initBuf &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_initBuf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_filterOn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_filterOff
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[174]"></a>Bsp_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Bsp_init &rArr; QS_onStartup &rArr; QS_initBuf &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dout_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLight_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedGsm2_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SysTick_Handler</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SysTick_Handler &rArr; QF_publish &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[196]"></a>QK_onIdle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QK_onIdle &rArr; QS_getByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_getByte
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[238]"></a>QF_onCleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_stop
</UL>

<P><STRONG><a name="[198]"></a>QF_onStartup</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QF_onStartup &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[38e]"></a>QS_onCleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>QS_onGetTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
</UL>

<P><STRONG><a name="[19a]"></a>QS_onFlush</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QS_onFlush &rArr; QS_getByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_getByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_usr_dict
</UL>

<P><STRONG><a name="[1ab]"></a>ConfigPacketMaker</STRONG> (Thumb, 660 bytes, Stack size 80 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ConfigPacketMaker &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffIntToStr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdConf15
</UL>

<P><STRONG><a name="[18f]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[269]"></a>Crc32Eth</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc32Eth
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashDiskImage
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageImageCrcOk
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatToFram
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
</UL>

<P><STRONG><a name="[1b2]"></a>InitCRC16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crc16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
</UL>

<P><STRONG><a name="[1b3]"></a>CalcCRC16</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, crc16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
</UL>

<P><STRONG><a name="[1af]"></a>MakeCRC16</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, crc16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MakeCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRC16
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPacketMaker
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTDeviceAuthPacketMaker
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSim
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNTPacketMaker
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsNTPacketMaker
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWritePacketSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteHardware
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteFin
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteDout
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteNavFilter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogReadWriteCounter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSecur
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteGprs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteServer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485Sensor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdConf15
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwStart17
</UL>

<P><STRONG><a name="[236]"></a>QK_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, qk_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[51]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, qk_port.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_schedPrio_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, qk_port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[217]"></a>DMA_DeInit</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[218]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[38f]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>DMA_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[391]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>DMA_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[395]"></a>FLASH_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[2b8]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[1b6]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1b5]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
</UL>

<P><STRONG><a name="[1b8]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
</UL>

<P><STRONG><a name="[1b9]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ba]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1bb]"></a>FLASH_ProgramWord</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1bc]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[1bd]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1be]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1bf]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1c0]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[398]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>FLASH_ITConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[1c1]"></a>GPIO_DeInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1c3]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17f]"></a>GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dout_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetLight_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS232_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedGsm2_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_CS_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45_CS_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySpi_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_hwinit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>

<P><STRONG><a name="[39e]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[29f]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>

<P><STRONG><a name="[3aa]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog_init
</UL>

<P><STRONG><a name="[3ab]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>RCC_HSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[1c4]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[3b1]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>RCC_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>RCC_LSEConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
</UL>

<P><STRONG><a name="[18e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_init
</UL>

<P><STRONG><a name="[18c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemUart_off
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemUart_on
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINTMR_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>

<P><STRONG><a name="[18d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_init
</UL>

<P><STRONG><a name="[1c2]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[1c7]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[3c1]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySpi_init
</UL>

<P><STRONG><a name="[242]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySpi_init
</UL>

<P><STRONG><a name="[1c8]"></a>I2S_Init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[3c7]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySpi_init
</UL>

<P><STRONG><a name="[3c9]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteStatusRegister
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadStatusRegister
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteEnableStatusReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[3d6]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>TIM_DeInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2a5]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINTMR_init
</UL>

<P><STRONG><a name="[3d9]"></a>TIM_OC1Init</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>TIM_OC2Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TIM_OC3Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1d2]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1d0]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ce]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1ca]"></a>TIM_ICInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[1d3]"></a>TIM_PWMIConfig</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3dd]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINTMR_init
</UL>

<P><STRONG><a name="[3de]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>TIM_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINTMR_init
</UL>

<P><STRONG><a name="[3e1]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINTMR_init
</UL>

<P><STRONG><a name="[3e2]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>TIM_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[1d4]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[1d6]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1d8]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[1d7]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1d9]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[3e6]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>TIM_SelectOCxM</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>TIM_SetClockDivision</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[41d]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>USART_DeInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[180]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_hwinit
</UL>

<P><STRONG><a name="[41e]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
</UL>

<P><STRONG><a name="[41f]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_hwinit
</UL>

<P><STRONG><a name="[216]"></a>USART_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_hwinit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_tx
</UL>

<P><STRONG><a name="[214]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[420]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[21f]"></a>USART_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[2a8]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
</UL>

<P><STRONG><a name="[215]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_hwinit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>

<P><STRONG><a name="[430]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>EXTI_Init</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>

<P><STRONG><a name="[434]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[436]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>

<P><STRONG><a name="[2a9]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2aa]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>OutDebugModem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OutDebugModem &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendServ48
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendServ49
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_top_1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_6
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_super_40
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_open_conn_41
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_auth_42
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_ready_44
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_get_remain_fw_data_46
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_send_packet_43
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_check_if_connected_14
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_15
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_18
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_22
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_close_gprs_10
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_close_connection_16
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_super_30
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendAnswer_35
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendAnsw36
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_delete_34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_unread_ok_33
</UL>

<P><STRONG><a name="[1dd]"></a>OutDebugModemSprintf2</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OutDebugModemSprintf2 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_error_3
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_error_20
</UL>

<P><STRONG><a name="[1df]"></a>OutDebugModemSprintf1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_22
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_fatal_error_65
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_fatal_error_64
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_fatal_error_63
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_fatal_error_62
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_fatal_error_61
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_super_30
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_error_21
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_fatal_error_67
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_error_3
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_fatal_error_66
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_fatal_error_60
</UL>

<P><STRONG><a name="[16f]"></a>Modem_ctor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Modem_ctor &rArr; QTimeEvt_ctorX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>MakeMsgSms</STRONG> (Thumb, 242 bytes, Stack size 104 bytes, modem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[170]"></a>Mparser_ctor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mparser_ctor &rArr; QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>ModemSendCommand</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ModemSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_unread_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_gprs_ready
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_message_storage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_send_at
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_baudrate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_fix_baudrate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_echo_off
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sim_det_off
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imei
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imsi
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_text_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_ind_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_show_mode_1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gsm_reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_open_gprs_check_ipstat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gprs_attach
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_add_iphead_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_manual_getdata_mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_apn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_start_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_bring_up_gprs_con
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_local_ip_address
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_request_to_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_tcp_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_sim
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_te_character
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_aon_on
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendServ48
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendServ49
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_top_1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_restart_4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_open_conn_41
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_check_if_connected_14
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_15
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_close_gprs_10
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_close_connection_16
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendAnswer_35
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendAnsw36
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_delete_34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsDeleteAll50
</UL>

<P><STRONG><a name="[210]"></a>ModemSendData</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModemSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_send
</UL>

<P><STRONG><a name="[1e3]"></a>ModemRxPin_deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemRxPin_deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_off_45
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_fatal_error_61
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_fatal_error_67
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_error_3
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_error_20
</UL>

<P><STRONG><a name="[1e2]"></a>ModemTxPin_deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemTxPin_deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_off_45
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_fatal_error_61
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_fatal_error_67
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_error_3
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_error_20
</UL>

<P><STRONG><a name="[1fc]"></a>ModemSM_ctor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ctor
</UL>

<P><STRONG><a name="[21d]"></a>ModemSM_check_unread_data</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, modem_sim900.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>

<P><STRONG><a name="[61]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>USART1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_push
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>ModemRingBuf_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modemringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModemRingBuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
</UL>

<P><STRONG><a name="[437]"></a>ring_buf_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modemringbuf.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>ModemRingBuf_pop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modemringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModemRingBuf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_start_of_message
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_unread_sms_to_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_packet_to_buf
</UL>

<P><STRONG><a name="[220]"></a>ModemRingBuf_push</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, modemringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>ModemRingBuf_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modemringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_start_of_message
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_unread_sms_to_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_packet_to_buf
</UL>

<P><STRONG><a name="[1fd]"></a>QActive_ctor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, qa_ctor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavFilter_ctor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_ctor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ctor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_ctor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_ctor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdisk_ctor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_ctor
</UL>

<P><STRONG><a name="[224]"></a>QActive_defer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qa_defer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QActive_defer &rArr; QEQueue_post &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskTop1
</UL>

<P><STRONG><a name="[226]"></a>QActive_recall</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, qa_defer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = QActive_recall &rArr; QEQueue_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskIdle3
</UL>

<P><STRONG><a name="[12f]"></a>QActive_post</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, qa_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = QActive_post &rArr; QK_sched_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_schedPrio_
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>QActive_get_</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, qa_get_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QActive_get_ &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
</UL>

<P><STRONG><a name="[22c]"></a>QF_getQueueMin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, qa_get_.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[130]"></a>QActive_postLIFO</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, qa_lifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = QActive_postLIFO &rArr; QK_sched_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_schedPrio_
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>QActive_subscribe</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, qa_sub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QActive_subscribe &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_initial
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlInitial1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_initial
</UL>

<P><STRONG><a name="[225]"></a>QEQueue_post</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, qeq_fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QEQueue_post &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_defer
</UL>

<P><STRONG><a name="[227]"></a>QEQueue_get</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, qeq_get.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QEQueue_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_recall
</UL>

<P><STRONG><a name="[22d]"></a>QEQueue_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, qeq_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QEQueue_init &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_ctor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdisk_ctor
</UL>

<P><STRONG><a name="[22e]"></a>QF_add_</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, qf_act.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = QF_add_ &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start
</UL>

<P><STRONG><a name="[22f]"></a>QF_remove_</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, qf_act.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_stop
</UL>

<P><STRONG><a name="[230]"></a>QF_gc</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, qf_gc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
</UL>

<P><STRONG><a name="[1f4]"></a>QF_newX_</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, qf_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_unread_sms_to_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_packet_to_buf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_get_remain_fw_data_46
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_send_packet_43
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeFreshPack9
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10ReadCardId_rx_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackModemBusy8
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdConf15
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwStart17
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_RS485_polling
</UL>

<P><STRONG><a name="[176]"></a>QF_poolInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, qf_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = QF_poolInit &rArr; QMPool_init &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>QF_psInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qf_psini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>QF_publish</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, qf_pspub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = QF_publish &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[195]"></a>QF_tickX</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, qf_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = QF_tickX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[234]"></a>QF_noTimeEvtsActiveX</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, qf_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[232]"></a>QMPool_get</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, qmp_get.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>

<P><STRONG><a name="[235]"></a>QF_getPoolMin</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, qmp_get.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[233]"></a>QMPool_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, qmp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QMPool_init &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
</UL>

<P><STRONG><a name="[231]"></a>QMPool_put</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, qmp_put.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[1e4]"></a>QTimeEvt_armX</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, qte_arm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendServ48
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendServ49
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_open_conn_41
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_15
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendAnswer_35
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendAnsw36
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_delete_34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_read_ok_32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_unread_ok_33
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInit2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskUnlToSend12
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelToSend11
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelPage10
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeFreshPack9
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskReadConfig5
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskSaveConfig15
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFramErr13
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFlashErr14
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackIdle7
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdStart13
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdSupervisor16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdReOpenConnection14
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_process_RS485_command
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_RS485_polling
</UL>

<P><STRONG><a name="[1fe]"></a>QTimeEvt_ctorX</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, qte_ctor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QTimeEvt_ctorX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_ctor
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Io_ctor
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdisk_ctor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_ctor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
</UL>

<P><STRONG><a name="[1e6]"></a>QTimeEvt_disarm</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, qte_darm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QTimeEvt_disarm &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendServ48
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendServ49
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_open_conn_41
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_15
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendAnswer_35
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendAnsw36
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_delete_34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_read_ok_32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_unread_ok_33
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFramErr13
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackIdle7
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdSupervisor16
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdReOpenConnection14
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_process_RS485_command
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_idle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_RS485_polling
</UL>

<P><STRONG><a name="[173]"></a>QF_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[237]"></a>QF_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onCleanup
</UL>

<P><STRONG><a name="[178]"></a>QF_run</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, qk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = QF_run &rArr; initialize &rArr; QK_sched_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_onIdle
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>QActive_start</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, qk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = QActive_start &rArr; QF_add_ &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onFlush
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qa_ctor.o(.constdata)
</UL>
<P><STRONG><a name="[23a]"></a>QActive_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
</UL>

<P><STRONG><a name="[1b4]"></a>QK_schedPrio_</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, qk_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[91]"></a>QK_sched_</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, qk_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = QK_sched_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qk_port.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>QS_endRec</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, qs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QS_endRec
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_initBuf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_usr_dict
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
</UL>

<P><STRONG><a name="[1a6]"></a>QS_beginRec</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, qs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QS_beginRec
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_initBuf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_usr_dict
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
</UL>

<P><STRONG><a name="[17e]"></a>QS_initBuf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, qs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = QS_initBuf &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
</UL>

<P><STRONG><a name="[184]"></a>QS_filterOn</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, qs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = QS_filterOn &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
</UL>

<P><STRONG><a name="[185]"></a>QS_filterOff</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, qs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = QS_filterOff &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onStartup
</UL>

<P><STRONG><a name="[438]"></a>QS_u8</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, qs.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>QS_u16</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, qs.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>QS_u32</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, qs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QS_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
</UL>

<P><STRONG><a name="[22a]"></a>QS_u8_</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, qs_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QS_u8_
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_usr_dict
</UL>

<P><STRONG><a name="[229]"></a>QS_u8u8_</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, qs_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QS_u8u8_
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
</UL>

<P><STRONG><a name="[228]"></a>QS_u16_</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, qs_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
</UL>

<P><STRONG><a name="[1a8]"></a>QS_u32_</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, qs_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QS_u32_
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
</UL>

<P><STRONG><a name="[43a]"></a>QS_str_</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, qs_.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>QS_str_ROM_</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, qs_.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QS_str_ROM_
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_usr_dict
</UL>

<P><STRONG><a name="[197]"></a>QS_getByte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, qs_byte.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QS_getByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onFlush
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_onIdle
</UL>

<P><STRONG><a name="[1f9]"></a>QS_sig_dict</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, qs_dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QS_sig_dict &rArr; QS_onFlush &rArr; QS_getByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onFlush
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str_ROM_
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_initial
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
</UL>

<P><STRONG><a name="[175]"></a>QS_obj_dict</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qs_dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QS_obj_dict &rArr; QS_onFlush &rArr; QS_getByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onFlush
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str_ROM_
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInitial0
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_initial
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_initial
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlInitial1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_initial
</UL>

<P><STRONG><a name="[1f8]"></a>QS_fun_dict</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qs_dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QS_fun_dict &rArr; QS_onFlush &rArr; QS_getByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onFlush
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str_ROM_
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_initial
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInitial0
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_initial
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_initial
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlInitial1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_initial
</UL>

<P><STRONG><a name="[23c]"></a>QS_usr_dict</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qs_dict.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onFlush
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u8_
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str_ROM_
</UL>

<P><STRONG><a name="[1a9]"></a>QS_str</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, qs_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QS_str
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
</UL>

<P><STRONG><a name="[43b]"></a>QS_str_ROM</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, qs_str.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>QFsm_dispatch</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, qfsm_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hard_reset_5
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_6
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_9
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_auth_42
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_get_remain_fw_data_46
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_send_packet_43
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_18
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_22
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qfsm_ini.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>QFsm_ctor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qfsm_ini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_ctor
</UL>

<P><STRONG><a name="[131]"></a>QFsm_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, qfsm_ini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = QFsm_init &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qfsm_ini.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>QHsm_dispatch</STRONG> (Thumb, 1304 bytes, Stack size 80 bytes, qhsm_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = QHsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u16_
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qa_ctor.o(.constdata)
<LI> qhsm_ini.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>QHsm_ctor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qhsm_ini.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[12c]"></a>QHsm_init</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, qhsm_ini.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = QHsm_init &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qa_ctor.o(.constdata)
<LI> qhsm_ini.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>QHsm_top</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qhsm_top.o(.text))
<BR>[Address Reference Count : 8]<UL><LI> modem.o(.text)
<LI> modem_parser.o(.text)
<LI> qhsm_ini.o(.text)
<LI> io.o(.text)
<LI> control_new.o(.text)
<LI> nmea_parser.o(.text)
<LI> disk.o(.text)
<LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>ProcessCommand</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, parsersms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ProcessCommand &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParserSms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdConf15
</UL>

<P><STRONG><a name="[23e]"></a>FindPassword</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, parsersms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FindPassword &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParserSms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdConf15
</UL>

<P><STRONG><a name="[1e5]"></a>ParserSms</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, parsersms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ParserSms &rArr; ProcessCommand &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPassword
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipEmptySpaces
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_unread_ok_33
</UL>

<P><STRONG><a name="[240]"></a>CheckPassword</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, parsersms.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[289]"></a>ShortToBigEndianStream</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, bytestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ShortToBigEndianStream
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFMPacketMaker
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsFMPacketMaker
</UL>

<P><STRONG><a name="[288]"></a>IntToBigEndianStream</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, bytestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToBigEndianStream
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFMPacketMaker
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsFMPacketMaker
</UL>

<P><STRONG><a name="[287]"></a>LongToBigEndianStream</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, bytestream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LongToBigEndianStream
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFMPacketMaker
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsFMPacketMaker
</UL>

<P><STRONG><a name="[1f0]"></a>BufToLittleEndianInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bytestream.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_22
</UL>

<P><STRONG><a name="[241]"></a>MemorySpi_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, memory_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemorySpi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInitial0
</UL>

<P><STRONG><a name="[43c]"></a>GetPageBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at45db.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>AT45_CS_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT45_CS_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInitial0
</UL>

<P><STRONG><a name="[245]"></a>AT45DBSpiReadWriteByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingNonZeroSector
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingSector0B
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingSector0A
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingBlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingPage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf2ComparePage
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf1ComparePage
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBuf2ToPage
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePageImageToBuf2
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBuf1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBuf2ToPageWithErase
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPageDirect
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPageToBuf2
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPageToBuf1
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNbytesFromBuf2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNbytesFromBuf1
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromBuf2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteFromBuf1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>

<P><STRONG><a name="[247]"></a>ReadDfStatus</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadDfStatus &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInit2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelPage10
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[248]"></a>ReadByteFromBuf1</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[249]"></a>ReadByteFromBuf2</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[24a]"></a>ReadNbytesFromBuf1</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[24b]"></a>ReadNbytesFromBuf2</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[24c]"></a>ReadPageToBuf1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[24d]"></a>ReadPageToBuf2</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[24e]"></a>ReadPageDirect</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadPageDirect &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
</UL>

<P><STRONG><a name="[24f]"></a>WriteBuf2ToPageWithErase</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteBuf2ToPageWithErase &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[250]"></a>FillBuf1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FillBuf1 &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInit2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
</UL>

<P><STRONG><a name="[251]"></a>WritePageImageToBuf2</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WritePageImageToBuf2 &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[252]"></a>WriteBuf2ToPage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[253]"></a>Buf1ComparePage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buf1ComparePage &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelPage10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
</UL>

<P><STRONG><a name="[254]"></a>Buf2ComparePage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buf2ComparePage &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[255]"></a>ErasingPage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ErasingPage &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelPage10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
</UL>

<P><STRONG><a name="[256]"></a>ErasingBlock</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at45db.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>

<P><STRONG><a name="[257]"></a>ErasingSector0A</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ErasingSector0A &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
</UL>

<P><STRONG><a name="[258]"></a>ErasingSector0B</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ErasingSector0B &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
</UL>

<P><STRONG><a name="[259]"></a>ErasingNonZeroSector</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, at45db.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ErasingNonZeroSector &rArr; AT45DBSpiReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45DBSpiReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
</UL>

<P><STRONG><a name="[25a]"></a>FM25_CS_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fm25cl64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25_CS_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInitial0
</UL>

<P><STRONG><a name="[25e]"></a>FM25_WriteEnableStatusReg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>

<P><STRONG><a name="[25f]"></a>FM25_ReadStatusRegister</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>

<P><STRONG><a name="[260]"></a>FM25_ReadByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>

<P><STRONG><a name="[261]"></a>FM25CL64_ReadWord</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>

<P><STRONG><a name="[262]"></a>FM25_ReadArray</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fm25cl64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FM25_ReadArray &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSim
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashDiskImage
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWritePacketSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteHardware
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteFin
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteDout
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteNavFilter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogReadWriteCounter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSecur
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteGprs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteServer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485Sensor
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_UnlockPointsToSend
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>

<P><STRONG><a name="[263]"></a>FM25_WriteStatusRegister</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>

<P><STRONG><a name="[264]"></a>FM25_WriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteDisable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteEnable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>

<P><STRONG><a name="[265]"></a>FM25CL64_WriteWord</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteDisable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteEnable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>

<P><STRONG><a name="[266]"></a>FM25_WriteArray</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fm25cl64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteDisable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteEnable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSim
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWritePacketSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteHardware
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteFin
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteDout
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteNavFilter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogReadWriteCounter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSecur
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteGprs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteServer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485Sensor
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatToFram
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
</UL>

<P><STRONG><a name="[267]"></a>FM25_FillPattern</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fm25cl64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteDisable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteEnable
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>

<P><STRONG><a name="[268]"></a>CopyFramPointsRingBufImageToRam</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CopyFramPointsRingBufImageToRam &rArr; FM25_ReadArray &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointsFromTailToWritePageBuf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_DeletePointsToSend
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_UnlockPointsToSend
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromTailToFlashBuf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_CopyPoint
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_CopyPointsFromTailToSendBuf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromHead
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromTail
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_AddToHead
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_Init
</UL>

<P><STRONG><a name="[26a]"></a>WriteFramPointsRingBufImageToFram</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_DeletePointsToSend
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_UnlockPointsToSend
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromTailToFlashBuf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_CopyPoint
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_CopyPointsFromTailToSendBuf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromHead
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromTail
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_AddToHead
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_Format
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_Init
</UL>

<P><STRONG><a name="[26b]"></a>FramRingBuf_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FramRingBuf_Init &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInit2
</UL>

<P><STRONG><a name="[26c]"></a>FramRingBuf_Format</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FramRingBuf_Format &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFramErr13
</UL>

<P><STRONG><a name="[26d]"></a>FramRingBuf_AddToHead</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FramRingBuf_AddToHead &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[26e]"></a>FramRingBuf_GetFromTail</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, framringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>

<P><STRONG><a name="[26f]"></a>FramRingBuf_GetFromHead</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, framringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>

<P><STRONG><a name="[270]"></a>FramRingBuf_CopyPointsFromTailToSendBuf</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FramRingBuf_CopyPointsFromTailToSendBuf &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsNTPacketMaker
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsFMPacketMaker
</UL>

<P><STRONG><a name="[271]"></a>FramRingBuf_CopyPoint</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, framringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>

<P><STRONG><a name="[272]"></a>FramRingBuf_GetFromTailToFlashBuf</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FramRingBuf_GetFromTailToFlashBuf &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointsFromTailToWritePageBuf
</UL>

<P><STRONG><a name="[273]"></a>FramRingBuf_UnlockPointsToSend</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FramRingBuf_UnlockPointsToSend &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskUnlToSend12
</UL>

<P><STRONG><a name="[274]"></a>FramRingBuf_DeletePointsToSend</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, framringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FramRingBuf_DeletePointsToSend &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFramPointsRingBufImageToFram
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelToSend11
</UL>

<P><STRONG><a name="[2bd]"></a>FramRingBuf_size_used</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, framringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIsNotEmpty
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackModemBusy8
</UL>

<P><STRONG><a name="[43d]"></a>FramRingBuf_size_to_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, framringbuf.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>FramRingBuf_size_to_flash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, framringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[27b]"></a>ConfigReadWriteRS485</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteRS485 &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[27c]"></a>ConfigReadWriteSim</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteSim &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[172]"></a>Fdisk_ctor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Fdisk_ctor &rArr; QTimeEvt_ctorX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>Io_ctor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Io_ctor &rArr; QTimeEvt_ctorX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>UART5_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TIM1_UP_IRQHandler &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c0]"></a>CalcCrc8</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, crc8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL10WriteAddr_rx_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL10WriteAddr_tx_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL10ReadId_rx_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL10ReadId_tx_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10WriteAddr_rx_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10WriteAddr_tx_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10Rele_rx_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10Rele_tx_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10ReadCardId_rx_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10ReadCardId_tx_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpsilonWriteAddr_rx_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpsilonWriteAddr_tx_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpsilonReadData_rx_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EpsilonReadData_tx_handler
</UL>

<P><STRONG><a name="[190]"></a>LedIndicator_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ledindicator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LedIndicator_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[194]"></a>LedIndicator</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ledindicator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LedIndicator &rArr; WPointSmsLedHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavigationLedHandler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPointSmsLedHandler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmLedHandler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsLedHandler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerLedHandler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485LedHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2b5]"></a>ErasePage</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[16d]"></a>Control_ctor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Control_ctor &rArr; QTimeEvt_ctorX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, control_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EpsilonReadData_tx_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, epsilon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EpsilonReadData_tx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epsilon.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>EpsilonReadData_rx_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, epsilon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EpsilonReadData_rx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epsilon.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>EpsilonWriteAddr_tx_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, epsilon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EpsilonWriteAddr_tx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epsilon.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>EpsilonWriteAddr_rx_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, epsilon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EpsilonWriteAddr_rx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> epsilon.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>GpsParser_ctor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpsParser_ctor &rArr; QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>UART4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; GpsRingBuf_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuf_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d9]"></a>OutDebugNavFilter</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OutDebugNavFilter &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_fix
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2da]"></a>OutDebugNavFilterSprintf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OutDebugNavFilterSprintf &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_fix
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2e6]"></a>DegrToRad</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DegrToRad &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
</UL>

<P><STRONG><a name="[171]"></a>NavFilter_ctor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NavFilter_ctor &rArr; QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43e]"></a>LSM303DLHC_TIMEOUT_UserCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nav_filter.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>GpsRingBuf_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gps_ring_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpsRingBuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_initial
</UL>

<P><STRONG><a name="[2d8]"></a>GpsRingBuf_push</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gps_ring_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpsRingBuf_push
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[2d5]"></a>ring_buf_pop_byte</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gps_ring_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buf_pop_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_work
</UL>

<P><STRONG><a name="[2d4]"></a>GpsRingBuf_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps_ring_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_work
</UL>

<P><STRONG><a name="[41]"></a>RF10ReadCardId_tx_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rf10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RF10ReadCardId_tx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf10.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>RF10ReadCardId_rx_handler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rf10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RF10ReadCardId_rx_handler &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf10.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>RF10Rele_tx_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rf10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RF10Rele_tx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf10.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>RF10Rele_rx_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rf10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RF10Rele_rx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf10.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>RF10WriteAddr_tx_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rf10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RF10WriteAddr_tx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf10.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>RF10WriteAddr_rx_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rf10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RF10WriteAddr_rx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf10.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>TL10ReadId_tx_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tl10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TL10ReadId_tx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl10.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>TL10ReadId_rx_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tl10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TL10ReadId_rx_handler &rArr; CalcCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl10.o(.data)
</UL>
<P><STRONG><a name="[2f4]"></a>TL10WriteAddr_tx_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tl10.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>

<P><STRONG><a name="[2f5]"></a>TL10WriteAddr_rx_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tl10.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc8
</UL>

<P><STRONG><a name="[28a]"></a>crc16_teltonika</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crc16_teltonika.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_teltonika
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFMPacketMaker
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsFMPacketMaker
</UL>

<P><STRONG><a name="[19c]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUper
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStringIsDigit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDigitInString
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParser
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[19d]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUper
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[1a5]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPacketMaker
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imei
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imsi
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_apn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_request_to_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_tcp_data
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendServ48
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_top_1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_open_conn_41
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_15
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGprsSms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeNavSms
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakePackSms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeModemSms
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeVerSms
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeStatusSms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeRS485Sms
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeImeiSms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendAnswer_35
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_delete_34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPassword
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwStart17
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
</UL>

<P><STRONG><a name="[2f8]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2f9]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2f7]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[142]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[2fd]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[148]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[150]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[13a]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2fe]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1a0]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reboot
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rrt
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketPrioFilter
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketSendDist
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPacketSendTime
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointStoreDist
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointStoreTime
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointStoreAngle
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFwVerNew
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DutDeltaN
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set6RS485Addr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set5RS485Addr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4RS485Addr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set3RS485Addr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2RS485Addr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1RS485Addr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set6RS485Dev
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set5RS485Dev
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4RS485Dev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set3RS485Dev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2RS485Dev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1RS485Dev
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2FinMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1FinMode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServicePort
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMainPort
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSim
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPassword
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSV
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGLGSV
</UL>

<P><STRONG><a name="[20a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPassword
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPassword
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMagneticVariation
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMagneticVariationEW
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
</UL>

<P><STRONG><a name="[208]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPassword
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParser
</UL>

<P><STRONG><a name="[1a1]"></a>strlcpy</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, strlcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsPsw2
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsUname2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsPsw1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsUname1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGprsApn1
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServiceIp
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMainIp
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSecur
</UL>

<P><STRONG><a name="[2f3]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF10ReadCardId_rx_handler
</UL>

<P><STRONG><a name="[17c]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMsgSms
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM2200AuthPacketMaker
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGprsSms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeModemSms
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeStatusSms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
</UL>

<P><STRONG><a name="[1ae]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPacketMaker
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTable_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_unread_sms_to_buf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMsgSms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGprsSms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeNavSms
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakePackSms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeModemSms
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeVerSms
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeStatusSms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeRS485Sms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdConf15
</UL>

<P><STRONG><a name="[207]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
</UL>

<P><STRONG><a name="[1ac]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPacketMaker
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMsgSms
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGprsSms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeNavSms
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakePackSms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeModemSms
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeVerSms
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeStatusSms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeRS485Sms
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imei
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imsi
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTDeviceAuthPacketMaker
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNTPacketMaker
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsNTPacketMaker
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteGprs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteServer
</UL>

<P><STRONG><a name="[303]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[43f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
</UL>

<P><STRONG><a name="[440]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteHardware
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogReadWriteCounter
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485Sensor
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuf_init
</UL>

<P><STRONG><a name="[304]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[443]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[444]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[445]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1a4]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUssdBalance2
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUssdBalance1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPassword
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMagneticVariation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
</UL>

<P><STRONG><a name="[19f]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2ef]"></a>asctime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2ee]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_fix
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2cf]"></a>mktime</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
</UL>

<P><STRONG><a name="[446]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[301]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[449]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[30a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[2fc]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[44b]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2f6]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[124]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[152]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[154]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[317]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[302]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[306]"></a>_asctime_r</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, asctime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[44c]"></a>_n$asctime_r</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[44d]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[44f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[128]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[319]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[313]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[126]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[318]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[30c]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[161]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2fa]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2fb]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[138]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[31d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[14a]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[31f]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[146]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[14e]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[31a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[323]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[166]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[328]"></a>_printf_fp_hex_real</STRONG> (Thumb, 754 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[329]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[156]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[158]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[31e]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[32a]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[365]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[16a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[450]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[452]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32e]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[32d]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[331]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[32f]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[330]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[30e]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[322]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[30f]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[321]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[332]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[312]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[333]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[335]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[336]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[337]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[339]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33a]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[33b]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[33c]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[33d]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[338]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[326]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[33e]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[32c]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[2ff]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2c5]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMagneticVariation
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
</UL>

<P><STRONG><a name="[2ea]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
</UL>

<P><STRONG><a name="[33f]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[341]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2e4]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
</UL>

<P><STRONG><a name="[2e8]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
</UL>

<P><STRONG><a name="[2e5]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[123]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[15d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[15f]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[2c6]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[343]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2cd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[346]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[349]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[34d]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2cc]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DegrToRad
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[34b]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[340]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[34c]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[34e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
</UL>

<P><STRONG><a name="[34f]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[334]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[454]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[296]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[455]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[456]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[350]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[353]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DegrToRad
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[351]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[345]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[348]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[2e0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeltaCource
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[352]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2e9]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[354]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[342]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[356]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeltaCource
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
</UL>

<P><STRONG><a name="[357]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeltaCource
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
</UL>

<P><STRONG><a name="[359]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[35b]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[35f]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[2dd]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
</UL>

<P><STRONG><a name="[35c]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[295]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
</UL>

<P><STRONG><a name="[35d]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
</UL>

<P><STRONG><a name="[457]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[2f0]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[35e]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[458]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[29a]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
</UL>

<P><STRONG><a name="[360]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[358]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[344]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2df]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeltaCource
</UL>

<P><STRONG><a name="[361]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[2e1]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeltaCource
</UL>

<P><STRONG><a name="[363]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[13c]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[140]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[34a]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[297]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[294]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
</UL>

<P><STRONG><a name="[316]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[325]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[324]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[364]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[179]"></a>WatchDog_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WatchDog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[186]"></a>LedGsm2_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedGsm2_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[187]"></a>LSM303_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM303_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[188]"></a>RS232_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RS232_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[189]"></a>NetLight_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NetLight_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[18a]"></a>Dout_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dout_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[18b]"></a>Clock_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_init
</UL>

<P><STRONG><a name="[199]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[1ad]"></a>OnOffIntToStr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPacketMaker
</UL>

<P><STRONG><a name="[19b]"></a>StrToUper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProtocol
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>

<P><STRONG><a name="[19e]"></a>OnOffStrToInt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUper
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNavFilter
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set6RS485Out
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set5RS485Out
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4RS485Out
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set3RS485Out
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2RS485Out
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1RS485Out
</UL>

<P><STRONG><a name="[24]"></a>SetProtocol</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetProtocol &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUper
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>SetSim</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetSim &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>SetMainIp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetMainIp &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>SetMainPort</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetMainPort &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>SetServiceIp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetServiceIp &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>SetServicePort</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetServicePort &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1a2]"></a>CheckFinMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2FinMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1FinMode
</UL>

<P><STRONG><a name="[28]"></a>Set1FinMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set1FinMode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFinMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>Set2FinMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set2FinMode &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFinMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>Stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1a3]"></a>CheckRS485DeviceName</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set6RS485Dev
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set5RS485Dev
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4RS485Dev
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set3RS485Dev
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2RS485Dev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1RS485Dev
</UL>

<P><STRONG><a name="[2b]"></a>Set1RS485Dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set1RS485Dev &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRS485DeviceName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>Set2RS485Dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set2RS485Dev &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRS485DeviceName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>Set3RS485Dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set3RS485Dev &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRS485DeviceName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>Set4RS485Dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set4RS485Dev &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRS485DeviceName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>Set5RS485Dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set5RS485Dev &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRS485DeviceName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>Set6RS485Dev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set6RS485Dev &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRS485DeviceName
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>Set1RS485Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set1RS485Addr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>Set2RS485Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set2RS485Addr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>Set3RS485Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set3RS485Addr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Set4RS485Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set4RS485Addr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>Set5RS485Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set5RS485Addr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>Set6RS485Addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set6RS485Addr &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>Set1RS485Out</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set1RS485Out &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>Set2RS485Out</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set2RS485Out &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>Set3RS485Out</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set3RS485Out &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>Set4RS485Out</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set4RS485Out &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>Set5RS485Out</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set5RS485Out &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>Set6RS485Out</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Set6RS485Out &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>DutDeltaN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DutDeltaN &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>SetFwVerNew</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetFwVerNew &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>SetPointStoreAngle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPointStoreAngle &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>SetPointStoreTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPointStoreTime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>SetPointStoreDist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPointStoreDist &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>SetNavFilter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetNavFilter &rArr; OnOffStrToInt &rArr; StrToUper &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOffStrToInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>SetPacketSendTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPacketSendTime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>SetPacketSendDist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPacketSendDist &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>SetPacketPrioFilter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetPacketPrioFilter &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>SetUssdBalance1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetUssdBalance1 &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>SetGprsApn1</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SetGprsApn1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>SetGprsUname1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetGprsUname1 &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>SetGprsPsw1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetGprsPsw1 &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>SetUssdBalance2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetUssdBalance2 &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>SetGprsApn2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetGprsApn2 &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>SetGprsUname2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetGprsUname2 &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>SetGprsPsw2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetGprsPsw2 &rArr; strlcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Config</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Config &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Rrt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Rrt &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Reboot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Reboot &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>GetGprs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>GetNav</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>GetPack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>GetVer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>GetRS485</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>GetBalance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>GetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>GetModem</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>GetImei</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[1b1]"></a>SetSysClockTo72</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1b0]"></a>SetSysClock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[92]"></a>svc_ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, qk_port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> qk_port.o(.text)
</UL>
<P><STRONG><a name="[1b7]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1cb]"></a>TI4_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1d1]"></a>TI3_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1cf]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1cd]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1dc]"></a>SendMsmSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hard_reset_5
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_6
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_9
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_auth_42
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_get_remain_fw_data_46
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_send_packet_43
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_18
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_22
</UL>

<P><STRONG><a name="[1e1]"></a>ClearErrorCounters</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_fatal_error_65
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_fatal_error_64
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_fatal_error_63
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_fatal_error_62
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_fatal_error_61
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_fatal_error_67
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_fatal_error_66
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_fatal_error_60
</UL>

<P><STRONG><a name="[1e0]"></a>AddStateHistory</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendServ48
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendServ49
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_top_1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_restart_4
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_off_45
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hard_reset_5
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_6
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_is_open_7
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_9
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gprs_is_open_state_11
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_super_40
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_open_conn_41
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_auth_42
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_ready_44
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_get_remain_fw_data_46
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_send_packet_43
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_connect_error_47
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_check_if_connected_14
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_15
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_18
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_tcp_is_open_state_13
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_22
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_error_23
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_send_packet_fatal_error_65
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_error_19
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_fatal_error_64
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_error_17
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_close_gprs_10
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_connection_fatal_error_63
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_close_connection_16
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_error_12
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_open_gprs_fatal_error_62
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_error_8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_gsm_open_fatal_error_61
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_super_30
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_check_balance_38
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsRequestToSendAnswer_35
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsSendAnsw36
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_delete_34
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_read_next_31
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsDeleteAll50
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_final_39
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_read_ok_32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sms_waiting_unread_ok_33
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_error_21
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_lock_fatal_error_67
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_error_3
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_error_20
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_sim_fatal_error_66
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_fatal_error_60
</UL>

<P><STRONG><a name="[97]"></a>Modem_power_on_start_up_fatal_error_60</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Modem_power_on_start_up_fatal_error_60 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>Modem_sim_fatal_error_66</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_sim_fatal_error_66 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>Modem_sim_error_20</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Modem_sim_error_20 &rArr; OutDebugModemSprintf2 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>Modem_power_on_start_up_error_3</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Modem_power_on_start_up_error_3 &rArr; OutDebugModemSprintf2 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>Modem_sim_lock_fatal_error_67</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Modem_sim_lock_fatal_error_67 &rArr; ModemTxPin_deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>Modem_sim_lock_error_21</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_sim_lock_error_21 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>Modem_sms_waiting_unread_ok_33</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Modem_sms_waiting_unread_ok_33 &rArr; ParserSms &rArr; ProcessCommand &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParserSms
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>Modem_sms_waiting_read_ok_32</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Modem_sms_waiting_read_ok_32 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>Modem_sms_final_39</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_sms_final_39
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>ModemSmsDeleteAll50</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ModemSmsDeleteAll50 &rArr; ModemSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>Modem_sms_read_next_31</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Modem_sms_read_next_31 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>Modem_sms_delete_34</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Modem_sms_delete_34 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>ModemSmsSendAnsw36</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ModemSmsSendAnsw36 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>ModemSmsRequestToSendAnswer_35</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = ModemSmsRequestToSendAnswer_35 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>Modem_sms_check_balance_38</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Modem_sms_check_balance_38 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>MakeImeiSms</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MakeImeiSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1e9]"></a>MakeRS485Sms</STRONG> (Thumb, 170 bytes, Stack size 112 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MakeRS485Sms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1ea]"></a>MakeStatusSms</STRONG> (Thumb, 700 bytes, Stack size 104 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MakeStatusSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1eb]"></a>MakeVerSms</STRONG> (Thumb, 154 bytes, Stack size 96 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MakeVerSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1ec]"></a>MakeModemSms</STRONG> (Thumb, 90 bytes, Stack size 112 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MakeModemSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1ed]"></a>MakePackSms</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MakePackSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1ee]"></a>MakeNavSms</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MakeNavSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[1ef]"></a>MakeGprsSms</STRONG> (Thumb, 710 bytes, Stack size 104 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MakeGprsSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSmsProcSmsFlags37
</UL>

<P><STRONG><a name="[9b]"></a>ModemSmsProcSmsFlags37</STRONG> (Thumb, 694 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ModemSmsProcSmsFlags37 &rArr; MakeModemSms &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeGprsSms
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeNavSms
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakePackSms
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeModemSms
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeVerSms
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeStatusSms
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeRS485Sms
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeImeiSms
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>Modem_sms_super_30</STRONG> (Thumb, 670 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Modem_sms_super_30 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>Modem_gsm_open_fatal_error_61</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Modem_gsm_open_fatal_error_61 &rArr; ModemTxPin_deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>Modem_gsm_open_error_8</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_gsm_open_error_8
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>Modem_open_gprs_fatal_error_62</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_open_gprs_fatal_error_62 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>Modem_open_gprs_error_12</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_open_gprs_error_12
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>Modem_close_connection_16</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Modem_close_connection_16 &rArr; OutDebugModem &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>Modem_open_connection_fatal_error_63</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_open_connection_fatal_error_63 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>Modem_close_gprs_10</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Modem_close_gprs_10 &rArr; OutDebugModem &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>Modem_open_connection_error_17</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_open_connection_error_17
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>Modem_authorization_fatal_error_64</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_authorization_fatal_error_64 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>Modem_authorization_error_19</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_authorization_error_19
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>Modem_send_packet_fatal_error_65</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_send_packet_fatal_error_65 &rArr; OutDebugModemSprintf1 &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>Modem_send_packet_error_23</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_send_packet_error_23
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>Modem_send_packet_22</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Modem_send_packet_22 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufToLittleEndianInt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>Modem_tcp_is_open_state_13</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_tcp_is_open_state_13
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[1f1]"></a>XTDeviceAuthPacketMaker</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XTDeviceAuthPacketMaker &rArr; MakeCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_upd_auth_42
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_18
</UL>

<P><STRONG><a name="[1f3]"></a>FM2200AuthPacketMaker</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FM2200AuthPacketMaker &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_authorization_18
</UL>

<P><STRONG><a name="[b7]"></a>Modem_authorization_18</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Modem_authorization_18 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM2200AuthPacketMaker
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTDeviceAuthPacketMaker
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>Modem_open_connection_15</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Modem_open_connection_15 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>Modem_check_if_connected_14</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Modem_check_if_connected_14 &rArr; OutDebugModem &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>Modem_upd_connect_error_47</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modem_upd_connect_error_47
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>Modem_upd_send_packet_43</STRONG> (Thumb, 680 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Modem_upd_send_packet_43 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>Modem_upd_get_remain_fw_data_46</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Modem_upd_get_remain_fw_data_46 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>Modem_upd_ready_44</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Modem_upd_ready_44 &rArr; OutDebugModem &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>Modem_upd_auth_42</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Modem_upd_auth_42 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTDeviceAuthPacketMaker
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>Modem_upd_open_conn_41</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Modem_upd_open_conn_41 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>Modem_upd_super_40</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Modem_upd_super_40 &rArr; OutDebugModem &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>Modem_gprs_is_open_state_11</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modem_gprs_is_open_state_11
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>Modem_open_gprs_9</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Modem_open_gprs_9 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>Modem_gsm_is_open_7</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modem_gsm_is_open_7
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>Modem_gsm_open_6</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Modem_gsm_open_6 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[1f5]"></a>SelectSim</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SelectSim
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_power_on_start_up_2
</UL>

<P><STRONG><a name="[93]"></a>Modem_power_on_start_up_2</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Modem_power_on_start_up_2 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemSprintf1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSim
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>Modem_hard_reset_5</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Modem_hard_reset_5 &rArr; SendMsmSignal &rArr; QFsm_dispatch &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_dispatch
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsmSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>ModemUart_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_off_45
</UL>

<P><STRONG><a name="[1f7]"></a>ModemUart_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_off_45
</UL>

<P><STRONG><a name="[c5]"></a>Modem_off_45</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Modem_off_45 &rArr; ModemTxPin_deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemUart_off
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemUart_on
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>Modem_restart_4</STRONG> (Thumb, 724 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Modem_restart_4 &rArr; ModemSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>Modem_top_1</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Modem_top_1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[1fb]"></a>ClearStateHistory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_initial
</UL>

<P><STRONG><a name="[c6]"></a>ModemSmsSendServ49</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ModemSmsSendServ49 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>ModemSmsRequestToSendServ48</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = ModemSmsRequestToSendServ48 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModem
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStateHistory
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>Modem_initial</STRONG> (Thumb, 1210 bytes, Stack size 16 bytes, modem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Modem_initial &rArr; QFsm_init &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QFsm_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStateHistory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearErrorCounters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem.o(.text)
</UL>
<P><STRONG><a name="[200]"></a>OutDebugModemParserSprintf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OutDebugModemParserSprintf &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_unread_sms_to_buf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_packet_to_buf
</UL>

<P><STRONG><a name="[cc]"></a>Mparser_copy_packet_to_buf</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Mparser_copy_packet_to_buf &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_pop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_count
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_parser.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>OutDebugModemParser</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OutDebugModemParser &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_u32_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_str
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_endRec
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_beginRec
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_onGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_copy_unread_sms_to_buf
</UL>

<P><STRONG><a name="[cb]"></a>Mparser_copy_unread_sms_to_buf</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Mparser_copy_unread_sms_to_buf &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_pop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_count
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParserSprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_parser.o(.text)
</UL>
<P><STRONG><a name="[204]"></a>CalcDigitInString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcDigitInString &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
</UL>

<P><STRONG><a name="[206]"></a>CalcCharInString</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, modem_parser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
</UL>

<P><STRONG><a name="[205]"></a>CheckStringIsDigit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckStringIsDigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_search_LF
</UL>

<P><STRONG><a name="[ca]"></a>Mparser_search_start_of_message</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mparser_search_start_of_message &rArr; ModemRingBuf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_pop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_parser.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>Mparser_search_LF</STRONG> (Thumb, 1698 bytes, Stack size 64 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Mparser_search_LF &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_pop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_count
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStringIsDigit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCharInString
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDigitInString
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugModemParser
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_parser.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>MsgTable_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MsgTable_init &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mparser_initial
</UL>

<P><STRONG><a name="[cd]"></a>Mparser_initial</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, modem_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Mparser_initial &rArr; QTimeEvt_ctorX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTable_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_parser.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>ModemSM_idle</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>ErrorHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_unread_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_gprs_ready
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_message_storage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_sms_ready
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_on
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_on_with_power_key
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_status_ok
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_send_at
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_baudrate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_fix_baudrate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_echo_off
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sim_det_off
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imei
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_call_ready
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imsi
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_text_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_ind_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_show_mode_1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_pause
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gsm_reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_open_gprs_check_ipstat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gprs_attach
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_add_iphead_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_manual_getdata_mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_apn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_start_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_bring_up_gprs_con
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_local_ip_address
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_request_to_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_tcp_data
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_tcp_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_sim
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_te_character
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_aon_on
</UL>

<P><STRONG><a name="[20f]"></a>OkHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OkHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_unread_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_gprs_ready
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_message_storage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_sms_ready
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_status_ok
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_send_at
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_baudrate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_fix_baudrate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_echo_off
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sim_det_off
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imei
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_call_ready
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imsi
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_text_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_ind_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_show_mode_1
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gsm_reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_open_gprs_check_ipstat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gprs_attach
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_add_iphead_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_manual_getdata_mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_apn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_start_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_bring_up_gprs_con
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_local_ip_address
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_request_to_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_tcp_data
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_tcp_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_sim
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_te_character
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_aon_on
</UL>

<P><STRONG><a name="[20e]"></a>TickHandler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_unread_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_gprs_ready
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_message_storage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_sms_ready
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_on
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_on_with_power_key
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_status_ok
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_send_at
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_baudrate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_fix_baudrate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_echo_off
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sim_det_off
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imei
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_call_ready
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_imsi
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_text_mode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_ind_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_sms_set_show_mode_1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_pause
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gsm_reg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_open_gprs_check_ipstat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_gprs_attach
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_add_iphead_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_manual_getdata_mode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_apn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_start_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_bring_up_gprs_con
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_local_ip_address
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_request_to_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_packet_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_waiting_tcp_data
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_get_tcp_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_check_sim
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_set_te_character
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_aon_on
</UL>

<P><STRONG><a name="[ef]"></a>ModemSM_aon_on</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_aon_on &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>ModemSM_set_te_character</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_set_te_character &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>ModemSM_check_sim</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_check_sim &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>ModemSM_get_tcp_data</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ModemSM_get_tcp_data &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>ModemSM_waiting_tcp_data</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSM_waiting_tcp_data &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>ModemSM_packet_send</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_packet_send &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>ModemSM_packet_request_to_send</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ModemSM_packet_request_to_send &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>ModemSM_get_local_ip_address</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_get_local_ip_address &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>ModemSM_bring_up_gprs_con</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_bring_up_gprs_con &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>ModemSM_start_task</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_start_task &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>ModemSM_set_apn</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ModemSM_set_apn &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>ModemSM_set_manual_getdata_mode</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_set_manual_getdata_mode &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>ModemSM_add_iphead_mode</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_add_iphead_mode &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>ModemSM_gprs_attach</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_gprs_attach &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>ModemSM_open_gprs_check_ipstat</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ModemSM_open_gprs_check_ipstat &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>ModemSM_gsm_reg</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_gsm_reg &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>ModemSM_pause</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSM_pause &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>ModemSM_power_off</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ModemSM_power_off &rArr; ModemTxPin_deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_deinit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_deinit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>ModemSM_sms_set_show_mode_1</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_sms_set_show_mode_1 &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>ModemSM_sms_set_ind_mode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_sms_set_ind_mode &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>ModemSM_sms_set_text_mode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_sms_set_text_mode &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>ModemSM_get_imsi</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ModemSM_get_imsi &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>ModemSM_waiting_call_ready</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSM_waiting_call_ready &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>ModemSM_get_imei</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ModemSM_get_imei &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>ModemSM_sim_det_off</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_sim_det_off &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>ModemSM_echo_off</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_echo_off &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>ModemSM_fix_baudrate</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_fix_baudrate &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>ModemSM_check_baudrate</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_check_baudrate &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>ModemSM_send_at</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_send_at &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>ModemSM_waiting_status_ok</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSM_waiting_status_ok &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>ModemSM_power_on_with_power_key</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSM_power_on_with_power_key &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[211]"></a>ModemRxPin_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModemRxPin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_on
</UL>

<P><STRONG><a name="[212]"></a>ModemTxPin_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModemTxPin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_power_on
</UL>

<P><STRONG><a name="[d0]"></a>ModemSM_power_on</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_power_on &rArr; ModemTxPin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemTxPin_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRxPin_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modem_sim900.o(.constdata)
<LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[213]"></a>Modem_hw_init</STRONG> (Thumb, 308 bytes, Stack size 96 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Modem_hw_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSM_initial
</UL>

<P><STRONG><a name="[cf]"></a>ModemSM_initial</STRONG> (Thumb, 726 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ModemSM_initial &rArr; Modem_hw_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_hw_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_sig_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_sim900.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>ModemSM_waiting_sms_ready</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModemSM_waiting_sms_ready &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_sim900.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>ModemSM_set_message_storage</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_set_message_storage &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_sim900.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>ModemSM_waiting_gprs_ready</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, modem_sim900.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModemSM_waiting_gprs_ready &rArr; TickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TickHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OkHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemSendCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modem_sim900.o(.constdata)
</UL>
<P><STRONG><a name="[222]"></a>ring_buf_pop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modemringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModemRingBuf_pop
</UL>

<P><STRONG><a name="[239]"></a>initialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = initialize &rArr; QK_sched_ &rArr; QF_gc &rArr; QMPool_put &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_sched_
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QK_schedPrio_
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[23f]"></a>SkipEmptySpaces</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, parsersms.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParserSms
</UL>

<P><STRONG><a name="[25b]"></a>FM25_ReadWriteByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fm25cl64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_FillPattern
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64_WriteWord
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteByte
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64_ReadWord
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadByte
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteDisable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteEnable
</UL>

<P><STRONG><a name="[25c]"></a>FM25_WriteEnable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fm25cl64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FM25_WriteEnable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_FillPattern
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64_WriteWord
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteByte
</UL>

<P><STRONG><a name="[25d]"></a>FM25_WriteDisable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fm25cl64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_FillPattern
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25CL64_WriteWord
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteByte
</UL>

<P><STRONG><a name="[f2]"></a>FdiskFlashErr14</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FdiskFlashErr14 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>SaveFatToFram</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SaveFatToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDiskImage
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskDelPage10
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[f3]"></a>FdiskFramErr13</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FdiskFramErr13 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_Format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[276]"></a>GetPointsFromTailToWritePageBuf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetPointsFromTailToWritePageBuf &rArr; FramRingBuf_GetFromTailToFlashBuf &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_GetFromTailToFlashBuf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFramPointsRingBufImageToRam
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskWrite7
</UL>

<P><STRONG><a name="[fd]"></a>FdiskWrite7</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FdiskWrite7 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPointsFromTailToWritePageBuf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatToFram
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_size_to_flash
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_AddToHead
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_Format
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf2ComparePage
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePageImageToBuf2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBuf2ToPageWithErase
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[278]"></a>ConfigReadWriteRS485Sensor</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteRS485Sensor &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[279]"></a>ConfigReadWriteServer</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteServer &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[27a]"></a>ConfigReadWriteGprs</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteGprs &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[27d]"></a>ConfigReadWriteSecur</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteSecur &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[27e]"></a>LogReadWriteCounter</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LogReadWriteCounter &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[27f]"></a>ConfigReadWriteNavFilter</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteNavFilter &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[280]"></a>ConfigReadWriteDout</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ConfigReadWriteDout &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[281]"></a>ConfigReadWriteFin</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteFin &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[282]"></a>ConfigReadWriteHardware</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWriteHardware &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[283]"></a>ConfigReadWritePacketSend</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConfigReadWritePacketSend &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_WriteArray
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>

<P><STRONG><a name="[284]"></a>ConfigSave</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ConfigSave &rArr; ConfigReadWriteDout &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSim
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWritePacketSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteHardware
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteFin
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteDout
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteNavFilter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogReadWriteCounter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSecur
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteGprs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteServer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485Sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskSaveConfig15
</UL>

<P><STRONG><a name="[fc]"></a>FdiskSaveConfig15</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FdiskSaveConfig15 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[285]"></a>ConfigRead</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ConfigRead &rArr; ConfigReadWriteDout &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSim
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWritePacketSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteHardware
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteFin
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteDout
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteNavFilter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogReadWriteCounter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteSecur
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteGprs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteServer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigReadWriteRS485Sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInit2
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskReadConfig5
</UL>

<P><STRONG><a name="[fb]"></a>FdiskReadConfig5</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FdiskReadConfig5 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[286]"></a>PointsFMPacketMaker</STRONG> (Thumb, 986 bytes, Stack size 64 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PointsFMPacketMaker &rArr; FramRingBuf_CopyPointsFromTailToSendBuf &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_teltonika
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_CopyPointsFromTailToSendBuf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongToBigEndianStream
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToBigEndianStream
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortToBigEndianStream
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeFreshPack9
</UL>

<P><STRONG><a name="[28b]"></a>PointsNTPacketMaker</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PointsNTPacketMaker &rArr; FramRingBuf_CopyPointsFromTailToSendBuf &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_CopyPointsFromTailToSendBuf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeFreshPack9
</UL>

<P><STRONG><a name="[fa]"></a>FdiskMakeFreshPack9</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FdiskMakeFreshPack9 &rArr; PointsFMPacketMaker &rArr; FramRingBuf_CopyPointsFromTailToSendBuf &rArr; WriteFramPointsRingBufImageToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsNTPacketMaker
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointsFMPacketMaker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[28c]"></a>PageImageCrcOk</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PageImageCrcOk &rArr; Crc32Eth
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskCheck
</UL>

<P><STRONG><a name="[f4]"></a>FdiskCheck</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FdiskCheck &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageImageCrcOk
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatToFram
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingPage
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf1ComparePage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPageDirect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[28d]"></a>PageFMPacketMaker</STRONG> (Thumb, 1048 bytes, Stack size 56 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PageFMPacketMaker &rArr; LongToBigEndianStream
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_teltonika
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongToBigEndianStream
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToBigEndianStream
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortToBigEndianStream
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
</UL>

<P><STRONG><a name="[28e]"></a>PageNTPacketMaker</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PageNTPacketMaker &rArr; MakeCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskMakeArchPack8
</UL>

<P><STRONG><a name="[f9]"></a>FdiskMakeArchPack8</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = FdiskMakeArchPack8 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageNTPacketMaker
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageFMPacketMaker
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageImageCrcOk
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPageDirect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>FdiskDelPage10</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FdiskDelPage10 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatToFram
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingPage
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buf1ComparePage
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>FdiskDelToSend11</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FdiskDelToSend11 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_DeletePointsToSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>FdiskUnlToSend12</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FdiskUnlToSend12 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_UnlockPointsToSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>FdiskOff16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FdiskOff16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>FdiskIdle3</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FdiskIdle3 &rArr; QActive_recall &rArr; QEQueue_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_recall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[28f]"></a>LoadFlashDiskImage</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoadFlashDiskImage &rArr; FM25_ReadArray &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_ReadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskInit2
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDiskImage
</UL>

<P><STRONG><a name="[290]"></a>ResetDiskImage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ResetDiskImage &rArr; SaveFatToFram &rArr; FM25_WriteArray &rArr; FM25_WriteDisable &rArr; FM25_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashDiskImage
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatToFram
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FdiskFormatFlash
</UL>

<P><STRONG><a name="[fe]"></a>FdiskFormatFlash</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FdiskFormatFlash &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDiskImage
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingNonZeroSector
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingSector0B
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasingSector0A
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBuf1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>FdiskInit2</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = FdiskInit2 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashDiskImage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRead
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_Init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBuf1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDfStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>FdiskTop1</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FdiskTop1 &rArr; QActive_defer &rArr; QEQueue_post &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_defer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>FdiskInitial0</STRONG> (Thumb, 648 bytes, Stack size 16 bytes, disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FdiskInitial0 &rArr; MemorySpi_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM25_CS_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT45_CS_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySpi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> disk.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>IO_RS485_polling</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = IO_RS485_polling &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>IO_idle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IO_idle &rArr; QTimeEvt_disarm &rArr; QS_u32_
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io.o(.text)
</UL>
<P><STRONG><a name="[291]"></a>PerMinSmooth2</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PerMinSmooth2 &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
</UL>

<P><STRONG><a name="[299]"></a>InputHandler2</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = InputHandler2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth2
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_top
</UL>

<P><STRONG><a name="[29c]"></a>PerMinSmooth1</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PerMinSmooth1 &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
</UL>

<P><STRONG><a name="[29d]"></a>InputHandler1</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = InputHandler1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerMinSmooth1
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_top
</UL>

<P><STRONG><a name="[102]"></a>IO_top</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = IO_top &rArr; InputHandler1 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHandler2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io.o(.text)
</UL>
<P><STRONG><a name="[29e]"></a>UIN_init</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UIN_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_initial
</UL>

<P><STRONG><a name="[2a2]"></a>ADC_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_initial
</UL>

<P><STRONG><a name="[2a3]"></a>DINTMR_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DINTMR_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_initial
</UL>

<P><STRONG><a name="[105]"></a>IO_process_RS485_command</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IO_process_RS485_command &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>IO_initial</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IO_initial &rArr; QActive_subscribe &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DINTMR_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIN_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>RS485_tx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_tx &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io.o(.text)
</UL>
<P><STRONG><a name="[2b1]"></a>RS485LedHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ledindicator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>

<P><STRONG><a name="[2b0]"></a>ServerLedHandler</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, ledindicator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ServerLedHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>

<P><STRONG><a name="[2af]"></a>GprsLedHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ledindicator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GprsLedHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>

<P><STRONG><a name="[2ae]"></a>GsmLedHandler</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, ledindicator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GsmLedHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>

<P><STRONG><a name="[2ad]"></a>WPointSmsLedHandler</STRONG> (Thumb, 488 bytes, Stack size 20 bytes, ledindicator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WPointSmsLedHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>

<P><STRONG><a name="[2ac]"></a>NavigationLedHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ledindicator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIndicator
</UL>

<P><STRONG><a name="[111]"></a>CtrlMemoryErrSuper11</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CtrlMemoryErrSuper11
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>CtrlSysRebootSuper22</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CtrlSysRebootSuper22
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2bb]"></a>UpdateOn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateOn
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdSupervisor16
</UL>

<P><STRONG><a name="[10a]"></a>CtrlUpdFinal19</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CtrlUpdFinal19
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2b4]"></a>UpdateDefer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateDefer
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdReOpenConnection14
</UL>

<P><STRONG><a name="[2b3]"></a>MakeFwReqPack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, control_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwStart17
</UL>

<P><STRONG><a name="[10c]"></a>CtrlUpdFwStart17</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = CtrlUpdFwStart17 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFwReqPack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>CtrlUpdConf15</STRONG> (Thumb, 652 bytes, Stack size 56 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CtrlUpdConf15 &rArr; ProcessCommand &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigPacketMaker
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPassword
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>CtrlUpdReOpenConnection14</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CtrlUpdReOpenConnection14 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDefer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2b9]"></a>CheckPageErase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, control_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[2b6]"></a>FlashWrite</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FlashWrite &rArr; ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErasePage
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdFwContinue18
</UL>

<P><STRONG><a name="[10d]"></a>CtrlUpdFwContinue18</STRONG> (Thumb, 1186 bytes, Stack size 88 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = CtrlUpdFwContinue18 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Eth
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCRC16
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFwReqPack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2ba]"></a>UpdateOff</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateOff
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlUpdSupervisor16
</UL>

<P><STRONG><a name="[109]"></a>CtrlUpdSupervisor16</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CtrlUpdSupervisor16 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateOff
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>CtrlUpdStart13</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CtrlUpdStart13 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>CtrlUpdSuper12</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, control_new.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>CtrlPackSendFresh10</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CtrlPackSendFresh10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>CtrlPackSendPage9</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CtrlPackSendPage9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>CtrlPackFinal6</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CtrlPackFinal6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2bc]"></a>CheckConfigUpdTimeout</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, control_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackIdle7
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackModemBusy8
</UL>

<P><STRONG><a name="[116]"></a>CtrlPackModemBusy8</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = CtrlPackModemBusy8 &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_size_used
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigUpdTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2be]"></a>DiskIsNotEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiskIsNotEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRingBuf_size_used
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackIdle7
</UL>

<P><STRONG><a name="[112]"></a>CtrlPackIdle7</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CtrlPackIdle7 &rArr; QTimeEvt_armX &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiskIsNotEmpty
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckConfigUpdTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2bf]"></a>SendEnable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, control_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlPackSuper3
</UL>

<P><STRONG><a name="[110]"></a>CtrlPackSuper3</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CtrlPackSuper3
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>CtrlWaitDiskReady2</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CtrlWaitDiskReady2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>CtrlInitial1</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, control_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CtrlInitial1 &rArr; QActive_subscribe &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_new.o(.text)
</UL>
<P><STRONG><a name="[2b2]"></a>NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, control_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlSysRebootSuper22
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlMemoryErrSuper11
</UL>

<P><STRONG><a name="[2c2]"></a>NmeaParserGetField</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NmeaParserGetField
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSV
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGLGSV
</UL>

<P><STRONG><a name="[2c1]"></a>ProcessGLGSV</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ProcessGLGSV &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParserGetField
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2c3]"></a>ProcessGPGSV</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ProcessGPGSV &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParserGetField
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2c4]"></a>ProcessGNGSA</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ProcessGNGSA &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2c7]"></a>ProcessGPGSA</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ProcessGPGSA &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2c8]"></a>ProcessGPGGA</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ProcessGPGGA &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2c9]"></a>WriteMagneticVariationEW</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteMagneticVariationEW
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
</UL>

<P><STRONG><a name="[2ca]"></a>WriteMagneticVariation</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = WriteMagneticVariation &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
</UL>

<P><STRONG><a name="[2cb]"></a>ProcessGNRMC</STRONG> (Thumb, 858 bytes, Stack size 112 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ProcessGNRMC &rArr; WriteMagneticVariation &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMagneticVariation
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMagneticVariationEW
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2d0]"></a>ProcessGPRMC</STRONG> (Thumb, 706 bytes, Stack size 136 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ProcessGPRMC &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParserGetField
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>

<P><STRONG><a name="[2d1]"></a>ParseNMEASentence</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ParseNMEASentence &rArr; ProcessGNRMC &rArr; WriteMagneticVariation &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPRMC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNRMC
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGGA
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSA
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGNGSA
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGPGSV
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessGLGSV
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParser
</UL>

<P><STRONG><a name="[2d3]"></a>axtoi</STRONG> (Thumb, 110 bytes, Stack size 36 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = axtoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParser
</UL>

<P><STRONG><a name="[2d2]"></a>NmeaParser</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = NmeaParser &rArr; ParseNMEASentence &rArr; ProcessGNRMC &rArr; WriteMagneticVariation &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axtoi
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseNMEASentence
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_work
</UL>

<P><STRONG><a name="[11a]"></a>Gparser_work</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = Gparser_work &rArr; NmeaParser &rArr; ParseNMEASentence &rArr; ProcessGNRMC &rArr; WriteMagneticVariation &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_pop_byte
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuf_count
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmeaParser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nmea_parser.o(.text)
</UL>
<P><STRONG><a name="[2d6]"></a>GpsParser_hwinit</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpsParser_hwinit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gparser_power_on_start
</UL>

<P><STRONG><a name="[119]"></a>Gparser_power_on_start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gparser_power_on_start &rArr; GpsParser_hwinit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParser_hwinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nmea_parser.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>Gparser_initial</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nmea_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Gparser_initial &rArr; QActive_subscribe &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuf_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nmea_parser.o(.text)
</UL>
<P><STRONG><a name="[2db]"></a>SendPointOrEvent</STRONG> (Thumb, 1080 bytes, Stack size 32 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SendPointOrEvent &rArr; QF_newX_ &rArr; QMPool_get &rArr; Q_onAssert &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2de]"></a>DeltaCource</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DeltaCource &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
</UL>

<P><STRONG><a name="[2e2]"></a>CalcDistance</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CalcDistance &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2ed]"></a>TimeValid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nav_filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_fix
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[2e7]"></a>GpsToDec</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DegrToRad
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
</UL>

<P><STRONG><a name="[2ec]"></a>SaveCurrentPoint</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_fix
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_off
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_waiting_hdop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_move
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_short_stop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gfilter_long_stop
</UL>

<P><STRONG><a name="[11f]"></a>Gfilter_long_stop</STRONG> (Thumb, 764 bytes, Stack size 88 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Gfilter_long_stop &rArr; SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeValid
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>Gfilter_short_stop</STRONG> (Thumb, 998 bytes, Stack size 88 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Gfilter_short_stop &rArr; SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeValid
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>Gfilter_move</STRONG> (Thumb, 896 bytes, Stack size 88 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Gfilter_move &rArr; SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeValid
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDistance
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeltaCource
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>Gfilter_waiting_hdop</STRONG> (Thumb, 584 bytes, Stack size 80 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Gfilter_waiting_hdop &rArr; SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeValid
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>Gfilter_off</STRONG> (Thumb, 410 bytes, Stack size 72 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Gfilter_off &rArr; SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeValid
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPointOrEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>Gfilter_waiting_fix</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Gfilter_waiting_fix &rArr; SaveCurrentPoint &rArr; GpsToDec &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilterSprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutDebugNavFilter
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurrentPoint
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>Gfilter_initial</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, nav_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gfilter_initial &rArr; QS_obj_dict &rArr; QS_onFlush &rArr; QS_getByte
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_obj_dict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QS_fun_dict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nav_filter.o(.text)
</UL>
<P><STRONG><a name="[2f1]"></a>ring_buf_push</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gps_ring_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsRingBuf_push
</UL>

<P><STRONG><a name="[2f2]"></a>ring_buf_pop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gps_ring_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buf_pop_byte
</UL>

<P><STRONG><a name="[308]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[355]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[347]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[362]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[35a]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[30b]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[125]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[315]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[320]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
